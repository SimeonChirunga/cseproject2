{
  "swagger": "2.0",
  "info": {
    "title": "Inventory API",
    "version": "1.0.0",
    "description": "API for managing inventory",
    "contact": {
      "email": "simeonchirunga@gmail.com"
    }
  },
  "host": "cseproject2.onrender.com",
  "basePath": "/api",
  "schemes": ["https"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "securityDefinitions": {
    "OAuth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://github.com/login/oauth/authorize",
      "tokenUrl": "https://github.com/login/oauth/access_token",
      "scopes": {
        "read:inventory": "Read access to inventory",
        "write:inventory": "Write access to inventory"
      }
    }
  },
  "tags": [
    {
      "name": "Categories",
      "description": "Operations with inventory categories"
    },
    {
      "name": "Items",
      "description": "Operations with inventory items"
    },
    {
      "name": "Authentication",
      "description": "Login/logout operations"
    }
  ],
  "paths": {
    "/categories": {
      "get": {
        "tags": ["Categories"],
        "summary": "Get all categories",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Category"
              }
            }
          }
        },
        "security": [{"OAuth2": ["read:inventory"]}]
      },
      "post": {
        "tags": ["Categories"],
        "summary": "Create a new category",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Category created",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [{"OAuth2": ["write:inventory"]}]
      }
    },
    "/categories/{id}": {
      "get": {
        "tags": ["Categories"],
        "summary": "Get category by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "objectid",
            "description": "ID of the category to return"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "404": {
            "description": "Category not found"
          }
        },
        "security": [{"OAuth2": ["read:inventory"]}]
      },
      "put": {
        "tags": ["Categories"],
        "summary": "Update an existing category",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "objectid"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category updated",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Category not found"
          }
        },
        "security": [{"OAuth2": ["write:inventory"]}]
      },
      "delete": {
        "tags": ["Categories"],
        "summary": "Delete a category",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "objectid"
          }
        ],
        "responses": {
          "204": {
            "description": "Category deleted"
          },
          "404": {
            "description": "Category not found"
          }
        },
        "security": [{"OAuth2": ["write:inventory"]}]
      }
    },
    "/items": {
      "get": {
        "tags": ["Items"],
        "summary": "Get all items",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "type": "string",
            "format": "objectid",
            "description": "Filter items by category ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Item"
              }
            }
          }
        },
        "security": [{"OAuth2": ["read:inventory"]}]
      },
      "post": {
        "tags": ["Items"],
        "summary": "Create a new item",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Item"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Item created",
            "schema": {
              "$ref": "#/definitions/Item"
            }
          },
          "400": {
            "description": "Invalid input"
          }
        },
        "security": [{"OAuth2": ["write:inventory"]}]
      }
    },
    "/items/{id}": {
      "get": {
        "tags": ["Items"],
        "summary": "Get item by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "objectid"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Item"
            }
          },
          "404": {
            "description": "Item not found"
          }
        },
        "security": [{"OAuth2": ["read:inventory"]}]
      },
      "put": {
        "tags": ["Items"],
        "summary": "Update an existing item",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "objectid"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Item"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Item updated",
            "schema": {
              "$ref": "#/definitions/Item"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Item not found"
          }
        },
        "security": [{"OAuth2": ["write:inventory"]}]
      },
      "delete": {
        "tags": ["Items"],
        "summary": "Delete an item",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "objectid"
          }
        ],
        "responses": {
          "204": {
            "description": "Item deleted"
          },
          "404": {
            "description": "Item not found"
          }
        },
        "security": [{"OAuth2": ["write:inventory"]}]
      }
    },
    "/auth/github": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Authenticate with GitHub",
        "responses": {
          "302": {
            "description": "Redirect to GitHub for authentication"
          }
        }
      }
    },
    "/auth/github/callback": {
      "get": {
        "tags": ["Authentication"],
        "summary": "GitHub authentication callback",
        "responses": {
          "302": {
            "description": "Redirect after authentication"
          }
        }
      }
    },
    "/auth/logout": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Logout current user",
        "responses": {
          "302": {
            "description": "Redirect after logout"
          }
        }
      }
    }
  },
  "definitions": {
    "Category": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "id": {
          "type": "string",
          "format": "objectid",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "example": "Electronics",
          "minLength": 2,
          "maxLength": 100
        },
        "description": {
          "type": "string",
          "example": "All electronic devices",
          "maxLength": 500
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "Item": {
      "type": "object",
      "required": ["name", "price", "category"],
      "properties": {
        "id": {
          "type": "string",
          "format": "objectid",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "example": "Laptop",
          "minLength": 2,
          "maxLength": 100
        },
        "description": {
          "type": "string",
          "example": "High performance laptop",
          "maxLength": 1000
        },
        "price": {
          "type": "number",
          "format": "float",
          "minimum": 0,
          "example": 999.99
        },
        "category": {
          "type": "string",
          "format": "objectid",
          "example": "64d21b4667d0d8992e610c85"
        },
        "stock": {
          "type": "integer",
          "minimum": 0,
          "example": 10
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find more info here",
    "url": "https://docs.your-api.com"
  }
}